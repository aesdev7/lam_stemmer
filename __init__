# This is __init__.py 
text in (paranthases) is a remark on the what is to be empirically proven as a misconception.
"""

This is motivated by McCarthy, (1981); a treatment of the nonconcatenative morphological system of Classical Arabic (Cl.Ar). 
In fact, Semitic languages morphological derivation processes are characterised by a wide variety of purely morphological alternations internal to the stem
(phonological alternations to be exact). As a result, Arabic morphological categories are expressed not expressed by the conventional affixation system, as in
Indo-European languages, but by morphemes whose only constant is a fixed canonical pattern. (for accuracy sakes, whose only constant is the template's phonological rules/patterns .i.e
contigous consonant-vowel segments e.g. in a CV.[CV].CV skelton. Indeed, this seaminglly simple trivil fact is the secret of the complixity of the whole system.
This project aims at explicating the system of predicates used to analyze inputs i.e. the possible structural descriptions of rules, and to define the operations
available for transforming inputs, the possible Structural Changes of rules. Ultimitly, a structural description delimiting a class of inputs and a Structural Change specifying
the operations that altered the input are sought.



/a/: A low, open vowel.
/i/: A high, front vowel.
/u/: A high, back vowel.
Vowels are characterized by their steady-state articulatory positions, serving as syllable nuclei.



"""
#          This is based on Al Suti formulla in Almuzhir
#           A function to Generate all possible two-character combinations of the Arabic alphabet.
# Here is the explaination 
